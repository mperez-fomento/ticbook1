#+title: Intro

** El ordenador
   :PROPERTIES:
   :CUSTOM_ID: el-ordenador
   :END:

Un ordenador es como un robot capaz de ejecutar ciertas órdenes.

El conjunto de órdenes que es capaz de ejecutar un ordenador se llama
*juego de instrucciones*.

El *juego de instrucciones*, junto con las reglas que hay que seguir
para escribir dichas instrucciones y que el ordenador las entienda se
llama *lenguaje máquina*.

Supongamos que tuviéramos un robot capaz de ejecutar las siguientes
órdenes: /avanza/, /gira/, /dispara/. Esas tres palabras formarían el
/juego de instrucciones/ del robot.

Imaginemos que para dar órdenes al robot, es necesario escribirlas en un
teclado, siguiendo estas reglas: - Al terminar cada orden hay que pulsar
la tecla /Enter/. - Algunas órdenes llevan un parámetro que completa el
significado de la instrucción (en el caso de /avanza/ sería el número de
metros, en el caso de /giro/, el número de grados). Dicho parámetro se
escribe detrás de la instrucción, separado por un espacio en blanco. -
Si se escribe una lista de órdenes, el robot las ejecutará en el orden
dado.

El /juego de instrucciones/ junto con las reglas anteriores, formarían
el /lenguaje máquina/ de nuestro robot.

Un *programa* de nuestro robot sería una lista de instrucciones que le
damos para que las ejecute. Por ejemplo:

#+BEGIN_EXAMPLE
    avanza 10
    dispara
    gira 90
    dispara
    gira -180
    dispara
#+END_EXAMPLE

Un ordenador funciona de manera muy similar. Lo que ocurre es que las
órdenes que puede ejecutar se refieren todas a cálculos con datos que
tiene almacenados en su memoria.

Por ejemplo, el /juego de instrucciones/ de un ordenador tiene
instrucciones como:

#+BEGIN_EXAMPLE
    leer un dato de la memoria
    escribir un dato en la memoria
    sumar dos números
    multiplicar dos números
    ...
#+END_EXAMPLE

Además, en el código máquina de un ordenador las instrucciones se
escriben codificadas en binario (es decir, traducidas a un lenguaje en
el que solo se usan dos símbolos: el 0 y el 1).

Por ejemplo, un programa para un ordenador podría tener el siguiente
aspecto:

#+BEGIN_EXAMPLE
    10011001110111010
    01110101000011111
    00111011100110001
#+END_EXAMPLE

** Lenguajes de alto nivel
   :PROPERTIES:
   :CUSTOM_ID: lenguajes-de-alto-nivel
   :END:

Escribir programas en código máquina es muy complicado, como es obvio.

Para facilitar la escritura de programas se inventaron lenguajes más
sencillos: los *lenguajes de alto nivel*. Ejemplos de estos lenguajes
son: JavaScript, Java, C, Python, C++, Lisp,...

Por ejemplo, se muestra ahora dos versiones del mismo programa: una
escrita en código máquina, y la otra escrita en C++.

#+BEGIN_EXAMPLE
    01010101
    01001000 10001001 11100101
    10111111 00000100 00100000 01000000 00000000
    10111000 00000000 00000000 00000000 00000000
    11101000 11110111 11111110 11111111 11111111
    10111000 00000000 00000000 00000000 00000000
    01011101
    11000011
    01001000 01100101 01101100 01101100 01101111 00100001 00000000
#+END_EXAMPLE

#+BEGIN_SRC C++
    #include <cstdio>

    int main()
    {
        printf("Hello!");
    }
#+END_SRC

Aunque la segunda versión es todavía difícil de entender, lo que está
claro es la primera es mucho más complicada. Al menos, se ve que hay
palabras escritas en inglés.

** Compilar
   :PROPERTIES:
   :CUSTOM_ID: compilar
   :END:

El ordenador es una máquina capaz de ejecutar programas escritos en
código máquina.

Pero, no es capaz de ejecutar directamente programas escritos en
lenguajes de alto nivel.

Por lo tanto, si queremos que el ordenador ejecute un programa escrito
en un lenguaje de alto nivel, como C++, tendremos que traducirlo a
código máquina antes de que el ordenador lo ejecute.

*Compilar* un programa es traducirlo a código máquina.

Para traducir programas escritos en lenguajes de alto nivel a código
máquina, utilizamos unos programas llamados *compiladores*.

El proceso para escribir un programa en C++ y ejecutarlo sería, pues, el
siguiente:

1. Escribir el programa en C++ usando un *editor* (programa para
   escribir textos), y guardarlo en un archivo (*archivo fuente*).
2. Compilar el *archivo fuente* usando un *compilador*, y guardar el
   resultado en un archivo (*archivo ejecutable*).
3. Decirle al ordenador que ejecute el programa.

Vamos a ver un ejemplo. Escribiremos un programa en C++, lo
compilaremos, y lo ejecutaremos. Todo el proceso lo haremos usando una
/consola de comandos/.

1. Abre una consola de comandos.
2. Escribe el siguiente comando en la consola:

#+BEGIN_SRC sh
#+END_SRC

2. Escribe el programa dado como ejemplo antes.
3. Guarda el archivo con el nombre /hello.cpp/ (este es el /archivo
   fuente/).
4. Abre una consola de comandos y escribe esta orden (el compilador que
   usamos se llama /g++/):

#+BEGIN_SRC sh
    g++ hello.cpp -o hello
#+END_SRC

5. La orden anterior habrá traducido el archivo fuente a código máquina,
   y habrá guardado el resultado en un archivo llamado /hello/ (este es
   el /archivo ejecutable/).
6. Ejecuta el programa que acabas de crear, escribiendo esto en la
   consola de comandos:

#+BEGIN_SRC sh
    ./hello
#+END_SRC

En el proceso de creación de un programa utilizaremos, por tanto, dos tipos de archivos:
- *archivo fuente*: contiene el programa escrito en C++ (el nombre termina en =.cpp=);
- *archivo ejecutable* (o /binario/): contiene el código máquina (se puede ejecutar).

Aunque no es obligatorio, es muy recomendable que el nombre del archivo fuente termine en =.cpp=. Eso permitirá que todos los programas lo identifiquen como un archivo fuente escrito en C++. El nombre del archivo ejecutable puede ser el que queramos.

** Herramientas
   :PROPERTIES:
   :CUSTOM_ID: herramientas
   :END:

Las herramientas que usaremos para crear programas serán las siguientes:
- *Consola de comandos* (/shell/): programa que sirve para dar órdenes al ordenador (gestionar archivos y carpetas, y ejecutar otros programas, principalmente).
- *Editor de código*: programa que sirve para escribir el código fuente.
- *Compilador*: programa que traduce el código fuente a código máquina y genera el archivo ejecutable.
- *Depurador*: programa que permite ejecutar el programa paso a paso para encontrar errores.
- *git*: programa que sirve para controlar los cambios que hacemos en el código fuente.
